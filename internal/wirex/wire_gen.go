// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wirex

import (
	"context"
	"github.com/codeExpert666/goinkblog-backend/internal/mods"
	"github.com/codeExpert666/goinkblog-backend/internal/mods/ai"
	api5 "github.com/codeExpert666/goinkblog-backend/internal/mods/ai/api"
	biz5 "github.com/codeExpert666/goinkblog-backend/internal/mods/ai/biz"
	"github.com/codeExpert666/goinkblog-backend/internal/mods/auth"
	"github.com/codeExpert666/goinkblog-backend/internal/mods/auth/api"
	"github.com/codeExpert666/goinkblog-backend/internal/mods/auth/biz"
	"github.com/codeExpert666/goinkblog-backend/internal/mods/auth/dal"
	"github.com/codeExpert666/goinkblog-backend/internal/mods/blog"
	api2 "github.com/codeExpert666/goinkblog-backend/internal/mods/blog/api"
	biz2 "github.com/codeExpert666/goinkblog-backend/internal/mods/blog/biz"
	dal2 "github.com/codeExpert666/goinkblog-backend/internal/mods/blog/dal"
	"github.com/codeExpert666/goinkblog-backend/internal/mods/comment"
	api3 "github.com/codeExpert666/goinkblog-backend/internal/mods/comment/api"
	biz3 "github.com/codeExpert666/goinkblog-backend/internal/mods/comment/biz"
	dal3 "github.com/codeExpert666/goinkblog-backend/internal/mods/comment/dal"
	"github.com/codeExpert666/goinkblog-backend/internal/mods/stat"
	api4 "github.com/codeExpert666/goinkblog-backend/internal/mods/stat/api"
	biz4 "github.com/codeExpert666/goinkblog-backend/internal/mods/stat/biz"
	dal4 "github.com/codeExpert666/goinkblog-backend/internal/mods/stat/dal"
	"github.com/codeExpert666/goinkblog-backend/pkg/util"
)

// Injectors from wire.go:

// BuildInjector 构建注入器
func BuildInjector(ctx context.Context) (*Injector, func(), error) {
	db, cleanup, err := InitDB(ctx)
	if err != nil {
		return nil, nil, err
	}
	cacher, cleanup2, err := InitCacher(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	auther, cleanup3, err := InitAuth(ctx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userRepository := &dal.UserRepository{
		DB: db,
	}
	authService := &biz.AuthService{
		UserRepository: userRepository,
		Auth:           auther,
		Cache:          cacher,
	}
	authHandler := &api.AuthHandler{
		AuthService: authService,
	}
	casbinRepository := &dal.CasbinRepository{
		DB: db,
	}
	trans := &util.Trans{
		DB: db,
	}
	casbinService := &biz.CasbinService{
		CasbinRepository: casbinRepository,
		Trans:            trans,
	}
	casbinHandler := &api.CasbinHandler{
		CasbinService: casbinService,
	}
	authAuth := &auth.Auth{
		DB:            db,
		AuthHandler:   authHandler,
		CasbinHandler: casbinHandler,
	}
	articleRepository := &dal2.ArticleRepository{
		DB: db,
	}
	categoryRepository := &dal2.CategoryRepository{
		DB: db,
	}
	tagRepository := &dal2.TagRepository{
		DB: db,
	}
	articleTagRepository := &dal2.ArticleTagRepository{
		DB: db,
	}
	interactionRepository := &dal2.InteractionRepository{
		DB: db,
	}
	utilTrans := util.Trans{
		DB: db,
	}
	articleService := &biz2.ArticleService{
		ArticleRepository:     articleRepository,
		CategoryRepository:    categoryRepository,
		TagRepository:         tagRepository,
		ArticleTagRepository:  articleTagRepository,
		InteractionRepository: interactionRepository,
		UserRepository:        userRepository,
		Trans:                 utilTrans,
	}
	articleHandler := &api2.ArticleHandler{
		ArticleService: articleService,
	}
	categoryService := &biz2.CategoryService{
		CategoryRepository: categoryRepository,
	}
	categoryHandler := &api2.CategoryHandler{
		CategoryService: categoryService,
	}
	tagService := &biz2.TagService{
		TagRepository:        tagRepository,
		ArticleTagRepository: articleTagRepository,
		Trans:                trans,
	}
	tagHandler := &api2.TagHandler{
		TagService: tagService,
	}
	blogBlog := &blog.Blog{
		DB:              db,
		ArticleHandler:  articleHandler,
		CategoryHandler: categoryHandler,
		TagHandler:      tagHandler,
	}
	commentRepository := &dal3.CommentRepository{
		DB: db,
	}
	commentService := &biz3.CommentService{
		CommentRepository: commentRepository,
		ArticleRepository: articleRepository,
		Trans:             utilTrans,
	}
	commentHandler := &api3.CommentHandler{
		CommentService: commentService,
	}
	commentComment := &comment.Comment{
		DB:             db,
		CommentHandler: commentHandler,
	}
	statRepository := &dal4.StatRepository{
		DB: db,
	}
	statService := &biz4.StatService{
		StatRepository: statRepository,
	}
	statHandler := &api4.StatHandler{
		StatService: statService,
	}
	statStat := &stat.Stat{
		DB:          db,
		StatHandler: statHandler,
	}
	aiService := &biz5.AIService{}
	aiHandler := &api5.AIHandler{
		AIService: aiService,
	}
	aiAI := &ai.AI{
		AIHandler: aiHandler,
	}
	modsMods := &mods.Mods{
		Auth:    authAuth,
		Blog:    blogBlog,
		Comment: commentComment,
		Stat:    statStat,
		AI:      aiAI,
	}
	injector := &Injector{
		DB:    db,
		Cache: cacher,
		Auth:  auther,
		M:     modsMods,
	}
	return injector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
